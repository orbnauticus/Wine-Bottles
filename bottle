#!/usr/bin/env python

VERSION='0.2.0'

from bottle import *

if __name__=='__main__':
	import sys
	import optparse
	
	parser = optparse.OptionParser(
		usage = "bottle.py [options] <bottle-name> <args...>",
		version = "%%prog %s" % VERSION,
		description = "With no arguments, runs the bottle's default command",
	)
	
	parser.add_option('-d', '--debug', action="store_true",
	 help="Run without actually doing anything")
	parser.add_option('-n', '--create', action='store_const', 
	 const='create', dest='action',
	 help="Creates a new bottle")
	parser.add_option('-c', '--configure', action='store_const',
	 const='configure', dest='action',
	 help="Runs winecfg in the bottle")
	parser.add_option('-p', '--package', action='store_true',
	 dest='package', default=False, metavar='dest',
	 help="Package a bottle for backup or distribution")
	parser.add_option('-i', '--install-version', action='store',
	 dest='newversion', type='string', default='', metavar='VER',
	 help="Download an version VER of wine")
	parser.add_option('-l', '--list', action='store_const',
	 const='list', dest='action',
	 help="Show all bottles already created")
	parser.add_option('--list-versions', action='store_const',
	 const='listversions', dest='action',
	 help="List versions of wine available for download")
	
	parser.set_defaults(debug=False, action='run')
	opts, args = parser.parse_args()
	
	b = Bottle()
	
	#Some options don't take a bottle name
	if parser.values.action == 'list':
		print '\n'.join(sorted(filter(lambda x:x!='.wineversions', os.listdir(b.path))))
	elif parser.values.newversion:
		WineVersionManager(b.path).install(parser.values.newversion)
	elif parser.values.action == 'listversions':
		print '\n'.join(WineVersionManager(b.path).list())
	else:
		#Others do
		basename = os.path.basename(sys.argv[0])
		if basename in ('bottle', 'bottle.py'):
			if len(args) == 0:
				parser.print_help()
				exit(0)
			name = args.pop(0)
		else:
			name = basename
		print name, args
		b.open(name)
		if parser.values.action == 'create':
			b.create()
		elif parser.values.action == 'configure':
			b.run('winecfg')
		elif parser.values.package:
			b.package()
		elif parser.values.action == 'run':
			if b.exists():
				b.execute(*args, debug=opts.debug)
			else:
				raise Exception('Bottle %r not found' % name)
		else:
			raise Exception('Unexpected value for parser.values.action: %r' % parser.values.action)
